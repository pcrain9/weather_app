{"version":3,"sources":["components/DailyWeatherDisplay.module.css","pages/HomePage.module.css","components/DailyWeather.module.css","pages/RadarWeatherPage.module.css","components/PlaceFinder.module.css","components/InitialWeather.module.css","components/WeeklyWeather.module.css","App.module.css","UI/Spinner.module.css","UI/Card.module.css","pages/RadarWeatherPage.js","store/is-loading-slice.js","store/location-forecast-slice.js","store/forecast-slice.js","store/index.js","components/PlaceFinder.js","components/GetInitialWeather.js","UI/Spinner.js","components/InitialWeather.js","pages/HomePage.js","UI/Card.js","components/DailyWeather.js","components/DailyWeatherDisplay.js","components/WeeklyWeather.js","pages/WeeklyWeatherPage.js","pages/DailyWeatherPage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","DefaultWeatherPage","className","classes","text_content","list","href","isLoadingSlice","createSlice","name","initialState","loading","hasError","reducers","doneLoading","state","beginLoading","errorOccurred","clearError","locationAndForecastSlice","location","coordinates","lat","lng","shortForecast","temperature","addLatLng","action","payload","setInitialForecast","setLocation","weeklyForecastSlice","weeklyForecast","addWeeklyForecast","length","counter","i","id","forecast","detailedForecast","console","log","store","configureStore","reducer","locationAndForecastActions","actions","weeklyForecastSliceActions","isLoadingSliceActions","PlaceFinder","dispatch","useDispatch","useState","setErrorOccurred","history","useHistory","placeWasSelectedHandler","place","a","query","geometry","toFixed","fetch","data","ok","json","retrievedWeather","error","properties","forecastData","jForecastData","periods","push","apiKey","onPlaceSelected","search_bar","defaultValue","onClick","onFocus","document","getElementsByClassName","value","initial","useSelector","locationData","jLocationData","results","address_components","long_name","short_name","Spinner","lds_ring","InitialWeather","isLoading","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","GetInitialWeather","daily_weather","show_weather","HomePage","userQueried","setUserQueried","top_nav","nav","to","weekly_weather","get_location","Card","props","onShowMore","onShowLess","card","children","DailyWeather","singleDayWeather","exact","path","RadarWeatherPage","daily_weather_card_big","big_weather_day_display","big_weather_day_display_day","long_forecast","DailyWeatherDisplay","userClicked","setUserClicked","day","daily_weather_card_small","words_small","button_small","WeeklyWeather","weeklyWeather","undefined","slice","map","element","WeeklyWeatherPage","DailyWeatherPage","App","background_color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.82843b49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"daily_weather_card_big\":\"DailyWeatherDisplay_daily_weather_card_big__3JqRc\",\"daily_weather_card_small\":\"DailyWeatherDisplay_daily_weather_card_small__wTr_f\",\"words_small\":\"DailyWeatherDisplay_words_small__1pIjH\",\"button_small\":\"DailyWeatherDisplay_button_small__p_rlx\",\"big_weather_day_display\":\"DailyWeatherDisplay_big_weather_day_display__2I78G\",\"big_weather_day_display_day\":\"DailyWeatherDisplay_big_weather_day_display_day__1tymW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"top_nav\":\"HomePage_top_nav__3fhhI\",\"nav\":\"HomePage_nav__aMcPG\",\"weekly_weather\":\"HomePage_weekly_weather__35Yu7\",\"daily_weather\":\"HomePage_daily_weather__3ORA_\",\"get_location\":\"HomePage_get_location__S3zIG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"daily_weather_card_big\":\"DailyWeather_daily_weather_card_big__1XNK8\",\"loadWeather\":\"DailyWeather_loadWeather__Z76iM\",\"big_weather_day_display_day\":\"DailyWeather_big_weather_day_display_day__1zVQq\",\"long_forecast\":\"DailyWeather_long_forecast__2cDXo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text_content\":\"RadarWeatherPage_text_content__NJCqh\",\"list\":\"RadarWeatherPage_list__16cbp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search_bar\":\"PlaceFinder_search_bar__20il3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"daily_weather\":\"InitialWeather_daily_weather__2GC0d\",\"show_weather\":\"InitialWeather_show_weather__2AVfo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weekly_weather\":\"WeeklyWeather_weekly_weather__2reWi\",\"loadWeather\":\"WeeklyWeather_loadWeather__1SaXS\",\"lds_ring\":\"WeeklyWeather_lds_ring__kH52V\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background_color\":\"App_background_color__2o_zm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds_ring\":\"Spinner_lds_ring__39HLD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1J3_w\"};","import React from 'react';\r\n\r\nimport classes from './RadarWeatherPage.module.css';\r\n\r\nfunction DefaultWeatherPage() {\r\n\r\n    return (\r\n            <div className={classes.text_content}>\r\n                <h1>Welcome to the Weather!</h1>\r\n                <h2>Click any of the links above to get started</h2>\r\n                <p>This site uses data from the following APIs: </p>\r\n                    <ul className={classes.list}>\r\n                        <li ><a href=\"https://api.weather.gov\">api.weather.gov</a></li>\r\n                        <li className={classes.list}><a href=\"maps.googleapis.com\">maps.googleapis.com</a></li>\r\n                    <br/><br/><br/><br/><br/>\r\n                    </ul>\r\n                \r\n            </div>\r\n    )\r\n}\r\n\r\nexport default DefaultWeatherPage;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst isLoadingSlice = createSlice({\r\n    name: \"isLoading\",\r\n    initialState: {loading: true, hasError: false},\r\n    reducers:{\r\n        doneLoading(state) {\r\n            state.loading = false;\r\n        },\r\n        beginLoading(state) {\r\n            state.loading = true;\r\n        },\r\n        errorOccurred(state){\r\n            state.hasError = true;\r\n        },\r\n        clearError(state){\r\n            state.hasError = false;\r\n        }\r\n    }\r\n});\r\n\r\nexport default isLoadingSlice;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst locationAndForecastSlice = createSlice({\r\n    name:\"location\",\r\n    initialState: {location: \"\", \r\n        coordinates: {\r\n            lat:0,\r\n            lng:0\r\n        },\r\n        shortForecast:\"\",\r\n        temperature:0},\r\n    reducers: {\r\n        addLatLng:(state, action) => {\r\n            state.coordinates = {\r\n                lat: action.payload.coordinates.lat,\r\n                lng: action.payload.coordinates.lng\r\n            }\r\n        },\r\n        setInitialForecast(state, action) {\r\n            state.shortForecast = action.payload.shortForecast;\r\n            state.temperature = action.payload.temperature;\r\n        },\r\n        setLocation(state, action) {\r\n            state.location = action.payload.location\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport default locationAndForecastSlice;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst weeklyForecastSlice = createSlice({\r\n    name:\"forecast\",\r\n    initialState: {\r\n        weeklyForecast: []\r\n    },\r\n    reducers:{\r\n        addWeeklyForecast(state, action) {\r\n            if(action.payload.weeklyForecast.length === 0)\r\n            {\r\n                console.log(\"here\");\r\n                return;\r\n            }\r\n            var counter=0;\r\n            for(let i = 0; i < action.payload.weeklyForecast.length; i+=2){\r\n                state.weeklyForecast[counter] = {\r\n                    id:counter,\r\n                    name: action.payload.weeklyForecast[i].name,\r\n                    temperature: action.payload.weeklyForecast[i].temperature,\r\n                    forecast: action.payload.weeklyForecast[i].detailedForecast\r\n                }\r\n                counter++;\r\n            }\r\n            \r\n        }\r\n    }\r\n});\r\n\r\nexport default weeklyForecastSlice;","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport isLoadingSlice from './is-loading-slice';\r\nimport locationAndForecastSlice from './location-forecast-slice';\r\nimport weeklyForecastSlice from './forecast-slice';\r\n\r\nconst store = configureStore({\r\n    reducer:{ \r\n        locationAndForecastSlice: locationAndForecastSlice.reducer,\r\n        weeklyForecastSlice: weeklyForecastSlice.reducer,\r\n        isLoadingSlice: isLoadingSlice.reducer\r\n    }\r\n});\r\n\r\nexport const locationAndForecastActions = locationAndForecastSlice.actions;\r\nexport const weeklyForecastSliceActions = weeklyForecastSlice.actions;\r\nexport const isLoadingSliceActions = isLoadingSlice.actions;\r\n\r\nexport default store;","import Autocomplete from \"react-google-autocomplete\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { weeklyForecastSliceActions, isLoadingSliceActions } from '../store/index';\r\n\r\nimport classes from './PlaceFinder.module.css';\r\n\r\nfunction PlaceFinder() {\r\n    const dispatch = useDispatch();\r\n    const [errorOccurred, setErrorOccurred] = useState(false);\r\n    const history = useHistory();\r\n\r\n    async function placeWasSelectedHandler(place) {\r\n\r\n        dispatch(isLoadingSliceActions.beginLoading());\r\n\r\n        const query = \"https://api.weather.gov/points/\" + place.geometry.location.lat().toFixed(4) + \",\" + place.geometry.location.lng().toFixed(4);\r\n        console.log(place.geometry.location.lat().toFixed(4));\r\n        var data, retrievedWeather;\r\n        try {\r\n            data = await fetch(query);\r\n            if (!data.ok) {\r\n                setErrorOccurred(true);\r\n                return;\r\n            }\r\n            retrievedWeather = await data.json();\r\n        } catch (error) {\r\n            console.error(error);\r\n            setErrorOccurred(true);\r\n            return;\r\n        }\r\n\r\n        //retrieve master forecast data\r\n        const forecast = retrievedWeather.properties.forecast;\r\n        var forecastData, jForecastData\r\n        try {\r\n            forecastData = await fetch(forecast);\r\n            if (!forecastData.ok) {\r\n                setErrorOccurred(true);\r\n                return;\r\n            }\r\n            jForecastData = await forecastData.json();\r\n        } catch (error) {\r\n            console.error(error);\r\n            console.log(forecastData)\r\n            console.log(jForecastData);\r\n            setErrorOccurred(true);\r\n            return;\r\n        }\r\n\r\n        //store weekly forecast data via dispatch\r\n        dispatch(weeklyForecastSliceActions.addWeeklyForecast({ weeklyForecast: jForecastData.properties.periods }));\r\n        dispatch(isLoadingSliceActions.doneLoading());\r\n        history.push(\"/weeklyweatherpage\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!errorOccurred ?\r\n\r\n                <Autocomplete\r\n                    apiKey=\"AIzaSyDt7UkFiL_-59O-MTBBSh6mtIt3LUQ6WCc\"\r\n                    onPlaceSelected={placeWasSelectedHandler}\r\n                    className={classes.search_bar}\r\n                    onFocus={() => {\r\n\r\n                        document.getElementsByClassName(\"search_bar\").value = \"\"\r\n                    }}\r\n                /> :\r\n                <Autocomplete\r\n                    apiKey=\"AIzaSyDt7UkFiL_-59O-MTBBSh6mtIt3LUQ6WCc\"\r\n                    onPlaceSelected={placeWasSelectedHandler}\r\n                    className={classes.search_bar}\r\n                    defaultValue=\"Couldn't load that :( try again!\"\r\n                    onClick={() => {setErrorOccurred(false)}} />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PlaceFinder;","import { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { locationAndForecastActions, weeklyForecastSliceActions, isLoadingSliceActions } from '../store/index';\r\n\r\nexport async function GetInitialWeather() {\r\n\r\n    const dispatch = useDispatch();\r\n    const initial = useSelector(state => state.locationAndForecastSlice);\r\n\r\n    if (initial.coordinates.lat === 0 && initial.coordinates.lat === 0) {\r\n        return;\r\n    }\r\n\r\n    const query = \"https://api.weather.gov/points/\" + initial.coordinates.lat + \",\" + initial.coordinates.lng;\r\n    var data, retrievedWeather, forecastData, jForecastData, locationData, jLocationData;\r\n    try {\r\n        data = await fetch(query);\r\n        retrievedWeather = await data.json();\r\n    } catch (error) {\r\n        console.error(error);\r\n        dispatch(isLoadingSliceActions.errorOccurred());\r\n    }\r\n\r\n    //retrieve master forecast data\r\n    const forecast = retrievedWeather.properties.forecast;\r\n    try {\r\n        forecastData = await fetch(forecast);\r\n        jForecastData = await forecastData.json();\r\n    } catch (error) {\r\n        console.error(error);\r\n        dispatch(isLoadingSliceActions.errorOccurred());\r\n    }\r\n\r\n    //store weekly forecast data via dispatch\r\n    dispatch(weeklyForecastSliceActions.addWeeklyForecast({ weeklyForecast: jForecastData.properties.periods }));\r\n    try {\r\n        locationData = await fetch(\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + initial.coordinates.lat + \",\" + initial.coordinates.lng + \"&key=AIzaSyDt7UkFiL_-59O-MTBBSh6mtIt3LUQ6WCc\");\r\n        jLocationData = await locationData.json();\r\n    } catch (error) {\r\n        console.error(error);\r\n        dispatch(isLoadingSliceActions.errorOccurred());\r\n    }\r\n\r\n    const location = jLocationData.results[6].address_components[0].long_name + \", \" + jLocationData.results[6].address_components[2].short_name;\r\n\r\n    dispatch(locationAndForecastActions.setLocation({ location: location }));\r\n    dispatch(locationAndForecastActions.setInitialForecast({\r\n        shortForecast: jForecastData.properties.periods[0].shortForecast,\r\n        temperature: jForecastData.properties.periods[0].temperature\r\n    }));\r\n    dispatch(isLoadingSliceActions.doneLoading());\r\n}\r\n","import React from 'react';\r\n\r\nimport classes from './Spinner.module.css';\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className={classes.lds_ring}><div></div><div></div><div></div><div></div></div>\r\n    )\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { locationAndForecastActions } from '../store/index';\r\n\r\nimport { GetInitialWeather } from './GetInitialWeather';\r\nimport Spinner from '../UI/Spinner';\r\nimport classes from './InitialWeather.module.css';\r\n\r\nfunction InitialWeather() {\r\n    const dispatch = useDispatch();\r\n    const initial = useSelector(state => state.locationAndForecastSlice);\r\n    const isLoading = useSelector(state => state.isLoadingSlice.loading);\r\n    const errorOccurred = useSelector(state => state.isLoadingSlice.hasError);\r\n\r\n    //get user location on load\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n            if (!navigator.geolocation) {\r\n                return;\r\n            }\r\n            dispatch(locationAndForecastActions.addLatLng({\r\n                coordinates:\r\n                {\r\n                    lat: position.coords.latitude,\r\n                    lng: position.coords.longitude\r\n                }\r\n            })\r\n            );\r\n        });\r\n        \r\n    }, [dispatch]);\r\n\r\n    GetInitialWeather();\r\n\r\n\r\n    return (\r\n        <>\r\n            {!errorOccurred ?\r\n                <>\r\n                    {isLoading ?\r\n                        <div className={classes.daily_weather}>\r\n                            <Spinner />\r\n                        </div>\r\n                        :\r\n                        <p className={classes.show_weather}>{initial.temperature}<sup>o</sup>F &ensp; {initial.location}</p>\r\n\r\n                    }\r\n                </> :\r\n                <div>foo</div>}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default InitialWeather;\r\n","import React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport PlaceFinder from '../components/PlaceFinder';\r\nimport InitialWeather from '../components/InitialWeather';\r\nimport classes from './HomePage.module.css';\r\n\r\nfunction HomePage() {\r\n\r\n    const [userQueried, setUserQueried] = useState(false);\r\n    return (\r\n        <>\r\n            <div className={classes.top_nav}>\r\n                <InitialWeather />\r\n            </div>\r\n            <div className={classes.nav}>\r\n                <NavLink to=\"/weeklyweatherpage\" className={classes.weekly_weather}><p>Weekly Weather</p></NavLink>\r\n                {!userQueried ? <div className={classes.get_location}\r\n                    onClick={() => { setUserQueried(true) }}><p>Search weather by location</p></div> :\r\n                    <PlaceFinder />}\r\n                <NavLink to=\"/dailyweatherpage\" className={classes.daily_weather}><p>Daily Weather</p></NavLink>\r\n            </div >\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\nimport classes from './Card.module.css';\r\n\r\nfunction Card(props) {\r\n\r\n    function handleClick() {\r\n        if(props.onShowMore){\r\n            props.onShowMore();\r\n        }\r\n        if(props.onShowLess){\r\n            props.onShowLess();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div onClick={handleClick} \r\n        className={`${classes.card} ${props.className}`}>{props.children}</div>\r\n    );\r\n}\r\n\r\nexport default Card\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport Spinner from '../UI/Spinner';\r\nimport RadarWeatherPage from '../pages/RadarWeatherPage';\r\nimport classes from './DailyWeather.module.css';\r\nimport Card from '../UI/Card';\r\n\r\nfunction DailyWeather() {\r\n\r\n    const singleDayWeather = useSelector(state => state.weeklyForecastSlice.weeklyForecast);\r\n    const loading = useSelector(state => state.isLoadingSlice.loading);\r\n\r\n    if (singleDayWeather.length === 0) {\r\n        return (\r\n            <Route exact path=\"/\">\r\n                <RadarWeatherPage />\r\n            </Route>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n        { !loading?\r\n            <Card className = {classes.daily_weather_card_big } >\r\n            <span className={classes.big_weather_day_display}>\r\n                <h1 className={classes.big_weather_day_display_day}>{singleDayWeather[0].name}</h1>\r\n            </span>\r\n            <h5>{singleDayWeather[0].temperature}<sup>o</sup>F</h5>\r\n            <p className={classes.long_forecast}>{singleDayWeather[0].forecast}</p>\r\n        </Card >: <Spinner />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DailyWeather;\r\n","import React, { useState } from 'react';\r\n\r\nimport Card from '../UI/Card';\r\nimport classes from './DailyWeatherDisplay.module.css';\r\n\r\nfunction DailyWeatherDisplay(props) {\r\n\r\n    const [userClicked, setUserClicked] = useState(false);\r\n\r\n    function handleShowFull() {\r\n        setUserClicked(true);\r\n    }\r\n\r\n    function handleShowLess() {\r\n        setUserClicked(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!userClicked ? <Card onShowMore={handleShowFull} className={classes.daily_weather_card_small}>\r\n                <h3 className={classes.words_small}>{props.day}:  {props.temperature}<sup>o</sup>F</h3>\r\n                <h3 className={classes.button_small} >^</h3>\r\n            </Card> :\r\n                <Card onShowLess={handleShowLess} className={classes.daily_weather_card_big}>\r\n                    <span className={classes.big_weather_day_display}>\r\n                        <h1 className={classes.big_weather_day_display_day}>{props.day}</h1> <h3>^</h3>\r\n                    </span>\r\n                    <h5>{props.temperature}<sup>o</sup>F</h5>\r\n                    <p>{props.forecast}</p>\r\n\r\n                </Card>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DailyWeatherDisplay;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport RadarWeatherPage from '../pages/RadarWeatherPage';\r\nimport Spinner from '../UI/Spinner';\r\nimport DailyWeather from './DailyWeather';\r\nimport DailyWeatherDisplay from './DailyWeatherDisplay';\r\nimport classes from './WeeklyWeather.module.css';\r\n\r\nfunction WeeklyWeather() {\r\n\r\n    const isLoading = useSelector(state => state.isLoadingSlice.loading);\r\n    const weeklyWeather = useSelector(state => state.weeklyForecastSlice.weeklyForecast);\r\n    const errorOccurred = useSelector(state => state.isLoadingSlice.hasError);\r\n\r\n    if (weeklyWeather === undefined) {\r\n        console.log(\"Here\");\r\n        return (\r\n            <Route exact path=\"/\">\r\n                <RadarWeatherPage />\r\n            </Route>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>{!errorOccurred ?\r\n            <div className={classes.weekly_weather}>\r\n                {isLoading ? <div className={classes.daily_weather}>\r\n                    <Spinner />\r\n                </div> : <DailyWeather />}\r\n                {\r\n                    weeklyWeather.slice(1).map(element => {\r\n                        return (\r\n                            <DailyWeatherDisplay\r\n                                key={element.id}\r\n                                day={element.name}\r\n                                temperature={element.temperature}\r\n                                forecast={element.forecast} />)\r\n                    })\r\n                }\r\n            </div> :\r\n            <div>foo</div>}\r\n        </>\r\n                )\r\n}\r\n\r\n                export default WeeklyWeather;\r\n","import React from 'react'\r\n\r\nimport WeeklyWeather from '../components/WeeklyWeather'\r\n\r\nfunction WeeklyWeatherPage() {\r\n    return (\r\n        <div>   \r\n            <WeeklyWeather />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeeklyWeatherPage\r\n","import React from 'react';\r\n\r\nimport DailyWeather from '../components/DailyWeather';\r\n\r\nfunction DailyWeatherPage() {\r\n    return (\r\n        <div>\r\n            <DailyWeather />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailyWeatherPage;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport classes from './App.module.css';\r\nimport RadarWeatherPage from './pages/RadarWeatherPage';\r\nimport HomePage from './pages/HomePage';\r\nimport WeeklyWeatherPage from './pages/WeeklyWeatherPage';\r\nimport DailyWeatherPage from './pages/DailyWeatherPage';\r\nimport PlaceFinder from './components/PlaceFinder';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <HomePage />\r\n      <div className={classes.background_color}>\r\n        <Switch>\r\n          <Route exact path='/weather_app'>\r\n            <RadarWeatherPage />\r\n          </Route>\r\n          <Route path=\"/weeklyweatherpage\">\r\n            <WeeklyWeatherPage />\r\n          </Route>\r\n          <Route path=\"/findweatherbyplacepage\">\r\n            <PlaceFinder />\r\n          </Route>\r\n          <Route exact path=\"/dailyweatherpage\">\r\n            <DailyWeatherPage />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './store/index';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}